// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef PROTOBUF_packet_2eproto__INCLUDED
#define PROTOBUF_packet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Butters {
namespace Model {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_packet_2eproto();
void protobuf_AssignDesc_packet_2eproto();
void protobuf_ShutdownFile_packet_2eproto();

class PacketHeader;

enum PacketHeader_CmdType {
  PacketHeader_CmdType_CREATE = 1,
  PacketHeader_CmdType_READ = 2,
  PacketHeader_CmdType_UPDATE = 3,
  PacketHeader_CmdType_DELETE = 4
};
bool PacketHeader_CmdType_IsValid(int value);
const PacketHeader_CmdType PacketHeader_CmdType_CmdType_MIN = PacketHeader_CmdType_CREATE;
const PacketHeader_CmdType PacketHeader_CmdType_CmdType_MAX = PacketHeader_CmdType_DELETE;
const int PacketHeader_CmdType_CmdType_ARRAYSIZE = PacketHeader_CmdType_CmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PacketHeader_CmdType_descriptor();
inline const ::std::string& PacketHeader_CmdType_Name(PacketHeader_CmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PacketHeader_CmdType_descriptor(), value);
}
inline bool PacketHeader_CmdType_Parse(
    const ::std::string& name, PacketHeader_CmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PacketHeader_CmdType>(
    PacketHeader_CmdType_descriptor(), name, value);
}
enum PacketHeader_FormatType {
  PacketHeader_FormatType_BINARY = 1,
  PacketHeader_FormatType_ASCII = 2
};
bool PacketHeader_FormatType_IsValid(int value);
const PacketHeader_FormatType PacketHeader_FormatType_FormatType_MIN = PacketHeader_FormatType_BINARY;
const PacketHeader_FormatType PacketHeader_FormatType_FormatType_MAX = PacketHeader_FormatType_ASCII;
const int PacketHeader_FormatType_FormatType_ARRAYSIZE = PacketHeader_FormatType_FormatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PacketHeader_FormatType_descriptor();
inline const ::std::string& PacketHeader_FormatType_Name(PacketHeader_FormatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PacketHeader_FormatType_descriptor(), value);
}
inline bool PacketHeader_FormatType_Parse(
    const ::std::string& name, PacketHeader_FormatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PacketHeader_FormatType>(
    PacketHeader_FormatType_descriptor(), name, value);
}
enum PacketHeader_PacketStatus {
  PacketHeader_PacketStatus_RETRIEVED = 1,
  PacketHeader_PacketStatus_CONTINUE = 2,
  PacketHeader_PacketStatus_ERROR = 3
};
bool PacketHeader_PacketStatus_IsValid(int value);
const PacketHeader_PacketStatus PacketHeader_PacketStatus_PacketStatus_MIN = PacketHeader_PacketStatus_RETRIEVED;
const PacketHeader_PacketStatus PacketHeader_PacketStatus_PacketStatus_MAX = PacketHeader_PacketStatus_ERROR;
const int PacketHeader_PacketStatus_PacketStatus_ARRAYSIZE = PacketHeader_PacketStatus_PacketStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* PacketHeader_PacketStatus_descriptor();
inline const ::std::string& PacketHeader_PacketStatus_Name(PacketHeader_PacketStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    PacketHeader_PacketStatus_descriptor(), value);
}
inline bool PacketHeader_PacketStatus_Parse(
    const ::std::string& name, PacketHeader_PacketStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PacketHeader_PacketStatus>(
    PacketHeader_PacketStatus_descriptor(), name, value);
}
enum PacketHeader_TransmitType {
  PacketHeader_TransmitType_DIRECT = 0,
  PacketHeader_TransmitType_BROADCAST = 1
};
bool PacketHeader_TransmitType_IsValid(int value);
const PacketHeader_TransmitType PacketHeader_TransmitType_TransmitType_MIN = PacketHeader_TransmitType_DIRECT;
const PacketHeader_TransmitType PacketHeader_TransmitType_TransmitType_MAX = PacketHeader_TransmitType_BROADCAST;
const int PacketHeader_TransmitType_TransmitType_ARRAYSIZE = PacketHeader_TransmitType_TransmitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PacketHeader_TransmitType_descriptor();
inline const ::std::string& PacketHeader_TransmitType_Name(PacketHeader_TransmitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PacketHeader_TransmitType_descriptor(), value);
}
inline bool PacketHeader_TransmitType_Parse(
    const ::std::string& name, PacketHeader_TransmitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PacketHeader_TransmitType>(
    PacketHeader_TransmitType_descriptor(), name, value);
}
// ===================================================================

class PacketHeader : public ::google::protobuf::Message {
 public:
  PacketHeader();
  virtual ~PacketHeader();

  PacketHeader(const PacketHeader& from);

  inline PacketHeader& operator=(const PacketHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketHeader& default_instance();

  void Swap(PacketHeader* other);

  // implements Message ----------------------------------------------

  PacketHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PacketHeader& from);
  void MergeFrom(const PacketHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PacketHeader_CmdType CmdType;
  static const CmdType CREATE = PacketHeader_CmdType_CREATE;
  static const CmdType READ = PacketHeader_CmdType_READ;
  static const CmdType UPDATE = PacketHeader_CmdType_UPDATE;
  static const CmdType DELETE = PacketHeader_CmdType_DELETE;
  static inline bool CmdType_IsValid(int value) {
    return PacketHeader_CmdType_IsValid(value);
  }
  static const CmdType CmdType_MIN =
    PacketHeader_CmdType_CmdType_MIN;
  static const CmdType CmdType_MAX =
    PacketHeader_CmdType_CmdType_MAX;
  static const int CmdType_ARRAYSIZE =
    PacketHeader_CmdType_CmdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdType_descriptor() {
    return PacketHeader_CmdType_descriptor();
  }
  static inline const ::std::string& CmdType_Name(CmdType value) {
    return PacketHeader_CmdType_Name(value);
  }
  static inline bool CmdType_Parse(const ::std::string& name,
      CmdType* value) {
    return PacketHeader_CmdType_Parse(name, value);
  }

  typedef PacketHeader_FormatType FormatType;
  static const FormatType BINARY = PacketHeader_FormatType_BINARY;
  static const FormatType ASCII = PacketHeader_FormatType_ASCII;
  static inline bool FormatType_IsValid(int value) {
    return PacketHeader_FormatType_IsValid(value);
  }
  static const FormatType FormatType_MIN =
    PacketHeader_FormatType_FormatType_MIN;
  static const FormatType FormatType_MAX =
    PacketHeader_FormatType_FormatType_MAX;
  static const int FormatType_ARRAYSIZE =
    PacketHeader_FormatType_FormatType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FormatType_descriptor() {
    return PacketHeader_FormatType_descriptor();
  }
  static inline const ::std::string& FormatType_Name(FormatType value) {
    return PacketHeader_FormatType_Name(value);
  }
  static inline bool FormatType_Parse(const ::std::string& name,
      FormatType* value) {
    return PacketHeader_FormatType_Parse(name, value);
  }

  typedef PacketHeader_PacketStatus PacketStatus;
  static const PacketStatus RETRIEVED = PacketHeader_PacketStatus_RETRIEVED;
  static const PacketStatus CONTINUE = PacketHeader_PacketStatus_CONTINUE;
  static const PacketStatus ERROR = PacketHeader_PacketStatus_ERROR;
  static inline bool PacketStatus_IsValid(int value) {
    return PacketHeader_PacketStatus_IsValid(value);
  }
  static const PacketStatus PacketStatus_MIN =
    PacketHeader_PacketStatus_PacketStatus_MIN;
  static const PacketStatus PacketStatus_MAX =
    PacketHeader_PacketStatus_PacketStatus_MAX;
  static const int PacketStatus_ARRAYSIZE =
    PacketHeader_PacketStatus_PacketStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PacketStatus_descriptor() {
    return PacketHeader_PacketStatus_descriptor();
  }
  static inline const ::std::string& PacketStatus_Name(PacketStatus value) {
    return PacketHeader_PacketStatus_Name(value);
  }
  static inline bool PacketStatus_Parse(const ::std::string& name,
      PacketStatus* value) {
    return PacketHeader_PacketStatus_Parse(name, value);
  }

  typedef PacketHeader_TransmitType TransmitType;
  static const TransmitType DIRECT = PacketHeader_TransmitType_DIRECT;
  static const TransmitType BROADCAST = PacketHeader_TransmitType_BROADCAST;
  static inline bool TransmitType_IsValid(int value) {
    return PacketHeader_TransmitType_IsValid(value);
  }
  static const TransmitType TransmitType_MIN =
    PacketHeader_TransmitType_TransmitType_MIN;
  static const TransmitType TransmitType_MAX =
    PacketHeader_TransmitType_TransmitType_MAX;
  static const int TransmitType_ARRAYSIZE =
    PacketHeader_TransmitType_TransmitType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TransmitType_descriptor() {
    return PacketHeader_TransmitType_descriptor();
  }
  static inline const ::std::string& TransmitType_Name(TransmitType value) {
    return PacketHeader_TransmitType_Name(value);
  }
  static inline bool TransmitType_Parse(const ::std::string& name,
      TransmitType* value) {
    return PacketHeader_TransmitType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required .Butters.Model.PacketHeader.CmdType cmd = 2 [default = CREATE];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline ::Butters::Model::PacketHeader_CmdType cmd() const;
  inline void set_cmd(::Butters::Model::PacketHeader_CmdType value);

  // required uint32 length = 3 [default = 0];
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);

  // required .Butters.Model.PacketHeader.FormatType format = 4 [default = BINARY];
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 4;
  inline ::Butters::Model::PacketHeader_FormatType format() const;
  inline void set_format(::Butters::Model::PacketHeader_FormatType value);

  // required .Butters.Model.PacketHeader.PacketStatus status = 5 [default = RETRIEVED];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::Butters::Model::PacketHeader_PacketStatus status() const;
  inline void set_status(::Butters::Model::PacketHeader_PacketStatus value);

  // required .Butters.Model.PacketHeader.TransmitType transmit = 6 [default = DIRECT];
  inline bool has_transmit() const;
  inline void clear_transmit();
  static const int kTransmitFieldNumber = 6;
  inline ::Butters::Model::PacketHeader_TransmitType transmit() const;
  inline void set_transmit(::Butters::Model::PacketHeader_TransmitType value);

  // required uint32 packetNum = 7;
  inline bool has_packetnum() const;
  inline void clear_packetnum();
  static const int kPacketNumFieldNumber = 7;
  inline ::google::protobuf::uint32 packetnum() const;
  inline void set_packetnum(::google::protobuf::uint32 value);

  // required uint32 totalPackets = 8;
  inline bool has_totalpackets() const;
  inline void clear_totalpackets();
  static const int kTotalPacketsFieldNumber = 8;
  inline ::google::protobuf::uint32 totalpackets() const;
  inline void set_totalpackets(::google::protobuf::uint32 value);

  // required uint32 bodyCrc = 9;
  inline bool has_bodycrc() const;
  inline void clear_bodycrc();
  static const int kBodyCrcFieldNumber = 9;
  inline ::google::protobuf::uint32 bodycrc() const;
  inline void set_bodycrc(::google::protobuf::uint32 value);

  // required uint32 headerCrc = 10;
  inline bool has_headercrc() const;
  inline void clear_headercrc();
  static const int kHeaderCrcFieldNumber = 10;
  inline ::google::protobuf::uint32 headercrc() const;
  inline void set_headercrc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Butters.Model.PacketHeader)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_transmit();
  inline void clear_has_transmit();
  inline void set_has_packetnum();
  inline void clear_has_packetnum();
  inline void set_has_totalpackets();
  inline void clear_has_totalpackets();
  inline void set_has_bodycrc();
  inline void clear_has_bodycrc();
  inline void set_has_headercrc();
  inline void clear_has_headercrc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  int cmd_;
  ::google::protobuf::uint32 length_;
  int format_;
  int status_;
  int transmit_;
  ::google::protobuf::uint32 packetnum_;
  ::google::protobuf::uint32 totalpackets_;
  ::google::protobuf::uint32 bodycrc_;
  ::google::protobuf::uint32 headercrc_;
  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
  static PacketHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// PacketHeader

// required uint32 id = 1 [default = 0];
inline bool PacketHeader::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketHeader::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketHeader::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketHeader::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PacketHeader::id() const {
  // @@protoc_insertion_point(field_get:Butters.Model.PacketHeader.id)
  return id_;
}
inline void PacketHeader::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Butters.Model.PacketHeader.id)
}

// required .Butters.Model.PacketHeader.CmdType cmd = 2 [default = CREATE];
inline bool PacketHeader::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacketHeader::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacketHeader::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacketHeader::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Butters::Model::PacketHeader_CmdType PacketHeader::cmd() const {
  // @@protoc_insertion_point(field_get:Butters.Model.PacketHeader.cmd)
  return static_cast< ::Butters::Model::PacketHeader_CmdType >(cmd_);
}
inline void PacketHeader::set_cmd(::Butters::Model::PacketHeader_CmdType value) {
  assert(::Butters::Model::PacketHeader_CmdType_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Butters.Model.PacketHeader.cmd)
}

// required uint32 length = 3 [default = 0];
inline bool PacketHeader::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PacketHeader::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PacketHeader::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PacketHeader::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 PacketHeader::length() const {
  // @@protoc_insertion_point(field_get:Butters.Model.PacketHeader.length)
  return length_;
}
inline void PacketHeader::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:Butters.Model.PacketHeader.length)
}

// required .Butters.Model.PacketHeader.FormatType format = 4 [default = BINARY];
inline bool PacketHeader::has_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PacketHeader::set_has_format() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PacketHeader::clear_has_format() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PacketHeader::clear_format() {
  format_ = 1;
  clear_has_format();
}
inline ::Butters::Model::PacketHeader_FormatType PacketHeader::format() const {
  // @@protoc_insertion_point(field_get:Butters.Model.PacketHeader.format)
  return static_cast< ::Butters::Model::PacketHeader_FormatType >(format_);
}
inline void PacketHeader::set_format(::Butters::Model::PacketHeader_FormatType value) {
  assert(::Butters::Model::PacketHeader_FormatType_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:Butters.Model.PacketHeader.format)
}

// required .Butters.Model.PacketHeader.PacketStatus status = 5 [default = RETRIEVED];
inline bool PacketHeader::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PacketHeader::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PacketHeader::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PacketHeader::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::Butters::Model::PacketHeader_PacketStatus PacketHeader::status() const {
  // @@protoc_insertion_point(field_get:Butters.Model.PacketHeader.status)
  return static_cast< ::Butters::Model::PacketHeader_PacketStatus >(status_);
}
inline void PacketHeader::set_status(::Butters::Model::PacketHeader_PacketStatus value) {
  assert(::Butters::Model::PacketHeader_PacketStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Butters.Model.PacketHeader.status)
}

// required .Butters.Model.PacketHeader.TransmitType transmit = 6 [default = DIRECT];
inline bool PacketHeader::has_transmit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PacketHeader::set_has_transmit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PacketHeader::clear_has_transmit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PacketHeader::clear_transmit() {
  transmit_ = 0;
  clear_has_transmit();
}
inline ::Butters::Model::PacketHeader_TransmitType PacketHeader::transmit() const {
  // @@protoc_insertion_point(field_get:Butters.Model.PacketHeader.transmit)
  return static_cast< ::Butters::Model::PacketHeader_TransmitType >(transmit_);
}
inline void PacketHeader::set_transmit(::Butters::Model::PacketHeader_TransmitType value) {
  assert(::Butters::Model::PacketHeader_TransmitType_IsValid(value));
  set_has_transmit();
  transmit_ = value;
  // @@protoc_insertion_point(field_set:Butters.Model.PacketHeader.transmit)
}

// required uint32 packetNum = 7;
inline bool PacketHeader::has_packetnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PacketHeader::set_has_packetnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PacketHeader::clear_has_packetnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PacketHeader::clear_packetnum() {
  packetnum_ = 0u;
  clear_has_packetnum();
}
inline ::google::protobuf::uint32 PacketHeader::packetnum() const {
  // @@protoc_insertion_point(field_get:Butters.Model.PacketHeader.packetNum)
  return packetnum_;
}
inline void PacketHeader::set_packetnum(::google::protobuf::uint32 value) {
  set_has_packetnum();
  packetnum_ = value;
  // @@protoc_insertion_point(field_set:Butters.Model.PacketHeader.packetNum)
}

// required uint32 totalPackets = 8;
inline bool PacketHeader::has_totalpackets() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PacketHeader::set_has_totalpackets() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PacketHeader::clear_has_totalpackets() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PacketHeader::clear_totalpackets() {
  totalpackets_ = 0u;
  clear_has_totalpackets();
}
inline ::google::protobuf::uint32 PacketHeader::totalpackets() const {
  // @@protoc_insertion_point(field_get:Butters.Model.PacketHeader.totalPackets)
  return totalpackets_;
}
inline void PacketHeader::set_totalpackets(::google::protobuf::uint32 value) {
  set_has_totalpackets();
  totalpackets_ = value;
  // @@protoc_insertion_point(field_set:Butters.Model.PacketHeader.totalPackets)
}

// required uint32 bodyCrc = 9;
inline bool PacketHeader::has_bodycrc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PacketHeader::set_has_bodycrc() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PacketHeader::clear_has_bodycrc() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PacketHeader::clear_bodycrc() {
  bodycrc_ = 0u;
  clear_has_bodycrc();
}
inline ::google::protobuf::uint32 PacketHeader::bodycrc() const {
  // @@protoc_insertion_point(field_get:Butters.Model.PacketHeader.bodyCrc)
  return bodycrc_;
}
inline void PacketHeader::set_bodycrc(::google::protobuf::uint32 value) {
  set_has_bodycrc();
  bodycrc_ = value;
  // @@protoc_insertion_point(field_set:Butters.Model.PacketHeader.bodyCrc)
}

// required uint32 headerCrc = 10;
inline bool PacketHeader::has_headercrc() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PacketHeader::set_has_headercrc() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PacketHeader::clear_has_headercrc() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PacketHeader::clear_headercrc() {
  headercrc_ = 0u;
  clear_has_headercrc();
}
inline ::google::protobuf::uint32 PacketHeader::headercrc() const {
  // @@protoc_insertion_point(field_get:Butters.Model.PacketHeader.headerCrc)
  return headercrc_;
}
inline void PacketHeader::set_headercrc(::google::protobuf::uint32 value) {
  set_has_headercrc();
  headercrc_ = value;
  // @@protoc_insertion_point(field_set:Butters.Model.PacketHeader.headerCrc)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Model
}  // namespace Butters

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Butters::Model::PacketHeader_CmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Butters::Model::PacketHeader_CmdType>() {
  return ::Butters::Model::PacketHeader_CmdType_descriptor();
}
template <> struct is_proto_enum< ::Butters::Model::PacketHeader_FormatType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Butters::Model::PacketHeader_FormatType>() {
  return ::Butters::Model::PacketHeader_FormatType_descriptor();
}
template <> struct is_proto_enum< ::Butters::Model::PacketHeader_PacketStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Butters::Model::PacketHeader_PacketStatus>() {
  return ::Butters::Model::PacketHeader_PacketStatus_descriptor();
}
template <> struct is_proto_enum< ::Butters::Model::PacketHeader_TransmitType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Butters::Model::PacketHeader_TransmitType>() {
  return ::Butters::Model::PacketHeader_TransmitType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_packet_2eproto__INCLUDED
