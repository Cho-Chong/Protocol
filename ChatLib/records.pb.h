// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: records.proto

#ifndef PROTOBUF_records_2eproto__INCLUDED
#define PROTOBUF_records_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_records_2eproto();
void protobuf_AssignDesc_records_2eproto();
void protobuf_ShutdownFile_records_2eproto();

class Record;

// ===================================================================

class Record : public ::google::protobuf::Message {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  void Swap(Record* other);

  // implements Message ----------------------------------------------

  Record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 test = 2;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 2;
  inline ::google::protobuf::int32 test() const;
  inline void set_test(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Record)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_test();
  inline void clear_has_test();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 test_;
  friend void  protobuf_AddDesc_records_2eproto();
  friend void protobuf_AssignDesc_records_2eproto();
  friend void protobuf_ShutdownFile_records_2eproto();

  void InitAsDefaultInstance();
  static Record* default_instance_;
};
// ===================================================================


// ===================================================================

// Record

// required int32 id = 1;
inline bool Record::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Record::id() const {
  // @@protoc_insertion_point(field_get:Record.id)
  return id_;
}
inline void Record::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Record.id)
}

// required int32 test = 2;
inline bool Record::has_test() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_test() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_test() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_test() {
  test_ = 0;
  clear_has_test();
}
inline ::google::protobuf::int32 Record::test() const {
  // @@protoc_insertion_point(field_get:Record.test)
  return test_;
}
inline void Record::set_test(::google::protobuf::int32 value) {
  set_has_test();
  test_ = value;
  // @@protoc_insertion_point(field_set:Record.test)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_records_2eproto__INCLUDED
