// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Butters {
namespace Model {

namespace {

const ::google::protobuf::Descriptor* PacketHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PacketHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PacketHeader_CmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PacketHeader_FormatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PacketHeader_PacketStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PacketHeader_TransmitType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_packet_2eproto() {
  protobuf_AddDesc_packet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packet.proto");
  GOOGLE_CHECK(file != NULL);
  PacketHeader_descriptor_ = file->message_type(0);
  static const int PacketHeader_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, transmit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, packetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, totalpackets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, bodycrc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, headercrc_),
  };
  PacketHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PacketHeader_descriptor_,
      PacketHeader::default_instance_,
      PacketHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PacketHeader));
  PacketHeader_CmdType_descriptor_ = PacketHeader_descriptor_->enum_type(0);
  PacketHeader_FormatType_descriptor_ = PacketHeader_descriptor_->enum_type(1);
  PacketHeader_PacketStatus_descriptor_ = PacketHeader_descriptor_->enum_type(2);
  PacketHeader_TransmitType_descriptor_ = PacketHeader_descriptor_->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PacketHeader_descriptor_, &PacketHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packet_2eproto() {
  delete PacketHeader::default_instance_;
  delete PacketHeader_reflection_;
}

void protobuf_AddDesc_packet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014packet.proto\022\rButters.Model\"\301\004\n\014Packet"
    "Header\022\r\n\002id\030\001 \002(\r:\0010\0228\n\003cmd\030\002 \002(\0162#.But"
    "ters.Model.PacketHeader.CmdType:\006CREATE\022"
    "\021\n\006length\030\003 \002(\r:\0010\022>\n\006format\030\004 \002(\0162&.But"
    "ters.Model.PacketHeader.FormatType:\006BINA"
    "RY\022C\n\006status\030\005 \002(\0162(.Butters.Model.Packe"
    "tHeader.PacketStatus:\tRETRIEVED\022B\n\010trans"
    "mit\030\006 \002(\0162(.Butters.Model.PacketHeader.T"
    "ransmitType:\006DIRECT\022\021\n\tpacketNum\030\007 \002(\r\022\024"
    "\n\014totalPackets\030\010 \002(\r\022\017\n\007bodyCrc\030\t \002(\r\022\021\n"
    "\theaderCrc\030\n \002(\r\"7\n\007CmdType\022\n\n\006CREATE\020\001\022"
    "\010\n\004READ\020\002\022\n\n\006UPDATE\020\003\022\n\n\006DELETE\020\004\"#\n\nFor"
    "matType\022\n\n\006BINARY\020\001\022\t\n\005ASCII\020\002\"6\n\014Packet"
    "Status\022\r\n\tRETRIEVED\020\001\022\014\n\010CONTINUE\020\002\022\t\n\005E"
    "RROR\020\003\")\n\014TransmitType\022\n\n\006DIRECT\020\000\022\r\n\tBR"
    "OADCAST\020\001", 609);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packet.proto", &protobuf_RegisterTypes);
  PacketHeader::default_instance_ = new PacketHeader();
  PacketHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packet_2eproto {
  StaticDescriptorInitializer_packet_2eproto() {
    protobuf_AddDesc_packet_2eproto();
  }
} static_descriptor_initializer_packet_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* PacketHeader_CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketHeader_CmdType_descriptor_;
}
bool PacketHeader_CmdType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PacketHeader_CmdType PacketHeader::CREATE;
const PacketHeader_CmdType PacketHeader::READ;
const PacketHeader_CmdType PacketHeader::UPDATE;
const PacketHeader_CmdType PacketHeader::DELETE;
const PacketHeader_CmdType PacketHeader::CmdType_MIN;
const PacketHeader_CmdType PacketHeader::CmdType_MAX;
const int PacketHeader::CmdType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* PacketHeader_FormatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketHeader_FormatType_descriptor_;
}
bool PacketHeader_FormatType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PacketHeader_FormatType PacketHeader::BINARY;
const PacketHeader_FormatType PacketHeader::ASCII;
const PacketHeader_FormatType PacketHeader::FormatType_MIN;
const PacketHeader_FormatType PacketHeader::FormatType_MAX;
const int PacketHeader::FormatType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* PacketHeader_PacketStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketHeader_PacketStatus_descriptor_;
}
bool PacketHeader_PacketStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PacketHeader_PacketStatus PacketHeader::RETRIEVED;
const PacketHeader_PacketStatus PacketHeader::CONTINUE;
const PacketHeader_PacketStatus PacketHeader::ERROR;
const PacketHeader_PacketStatus PacketHeader::PacketStatus_MIN;
const PacketHeader_PacketStatus PacketHeader::PacketStatus_MAX;
const int PacketHeader::PacketStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* PacketHeader_TransmitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketHeader_TransmitType_descriptor_;
}
bool PacketHeader_TransmitType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PacketHeader_TransmitType PacketHeader::DIRECT;
const PacketHeader_TransmitType PacketHeader::BROADCAST;
const PacketHeader_TransmitType PacketHeader::TransmitType_MIN;
const PacketHeader_TransmitType PacketHeader::TransmitType_MAX;
const int PacketHeader::TransmitType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PacketHeader::kIdFieldNumber;
const int PacketHeader::kCmdFieldNumber;
const int PacketHeader::kLengthFieldNumber;
const int PacketHeader::kFormatFieldNumber;
const int PacketHeader::kStatusFieldNumber;
const int PacketHeader::kTransmitFieldNumber;
const int PacketHeader::kPacketNumFieldNumber;
const int PacketHeader::kTotalPacketsFieldNumber;
const int PacketHeader::kBodyCrcFieldNumber;
const int PacketHeader::kHeaderCrcFieldNumber;
#endif  // !_MSC_VER

PacketHeader::PacketHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Butters.Model.PacketHeader)
}

void PacketHeader::InitAsDefaultInstance() {
}

PacketHeader::PacketHeader(const PacketHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Butters.Model.PacketHeader)
}

void PacketHeader::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cmd_ = 1;
  length_ = 0u;
  format_ = 1;
  status_ = 1;
  transmit_ = 0;
  packetnum_ = 0u;
  totalpackets_ = 0u;
  bodycrc_ = 0u;
  headercrc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PacketHeader::~PacketHeader() {
  // @@protoc_insertion_point(destructor:Butters.Model.PacketHeader)
  SharedDtor();
}

void PacketHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PacketHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketHeader_descriptor_;
}

const PacketHeader& PacketHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

PacketHeader* PacketHeader::default_instance_ = NULL;

PacketHeader* PacketHeader::New() const {
  return new PacketHeader;
}

void PacketHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PacketHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(transmit_, totalpackets_);
    id_ = 0u;
    cmd_ = 1;
    length_ = 0u;
    format_ = 1;
    status_ = 1;
  }
  ZR_(bodycrc_, headercrc_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PacketHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Butters.Model.PacketHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required .Butters.Model.PacketHeader.CmdType cmd = 2 [default = CREATE];
      case 2: {
        if (tag == 16) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Butters::Model::PacketHeader_CmdType_IsValid(value)) {
            set_cmd(static_cast< ::Butters::Model::PacketHeader_CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // required uint32 length = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_format;
        break;
      }

      // required .Butters.Model.PacketHeader.FormatType format = 4 [default = BINARY];
      case 4: {
        if (tag == 32) {
         parse_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Butters::Model::PacketHeader_FormatType_IsValid(value)) {
            set_format(static_cast< ::Butters::Model::PacketHeader_FormatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required .Butters.Model.PacketHeader.PacketStatus status = 5 [default = RETRIEVED];
      case 5: {
        if (tag == 40) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Butters::Model::PacketHeader_PacketStatus_IsValid(value)) {
            set_status(static_cast< ::Butters::Model::PacketHeader_PacketStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_transmit;
        break;
      }

      // required .Butters.Model.PacketHeader.TransmitType transmit = 6 [default = DIRECT];
      case 6: {
        if (tag == 48) {
         parse_transmit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Butters::Model::PacketHeader_TransmitType_IsValid(value)) {
            set_transmit(static_cast< ::Butters::Model::PacketHeader_TransmitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_packetNum;
        break;
      }

      // required uint32 packetNum = 7;
      case 7: {
        if (tag == 56) {
         parse_packetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packetnum_)));
          set_has_packetnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_totalPackets;
        break;
      }

      // required uint32 totalPackets = 8;
      case 8: {
        if (tag == 64) {
         parse_totalPackets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalpackets_)));
          set_has_totalpackets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bodyCrc;
        break;
      }

      // required uint32 bodyCrc = 9;
      case 9: {
        if (tag == 72) {
         parse_bodyCrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodycrc_)));
          set_has_bodycrc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_headerCrc;
        break;
      }

      // required uint32 headerCrc = 10;
      case 10: {
        if (tag == 80) {
         parse_headerCrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headercrc_)));
          set_has_headercrc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Butters.Model.PacketHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Butters.Model.PacketHeader)
  return false;
#undef DO_
}

void PacketHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Butters.Model.PacketHeader)
  // required uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .Butters.Model.PacketHeader.CmdType cmd = 2 [default = CREATE];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  // required uint32 length = 3 [default = 0];
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->length(), output);
  }

  // required .Butters.Model.PacketHeader.FormatType format = 4 [default = BINARY];
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->format(), output);
  }

  // required .Butters.Model.PacketHeader.PacketStatus status = 5 [default = RETRIEVED];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // required .Butters.Model.PacketHeader.TransmitType transmit = 6 [default = DIRECT];
  if (has_transmit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->transmit(), output);
  }

  // required uint32 packetNum = 7;
  if (has_packetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->packetnum(), output);
  }

  // required uint32 totalPackets = 8;
  if (has_totalpackets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->totalpackets(), output);
  }

  // required uint32 bodyCrc = 9;
  if (has_bodycrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->bodycrc(), output);
  }

  // required uint32 headerCrc = 10;
  if (has_headercrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->headercrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Butters.Model.PacketHeader)
}

::google::protobuf::uint8* PacketHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Butters.Model.PacketHeader)
  // required uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .Butters.Model.PacketHeader.CmdType cmd = 2 [default = CREATE];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  // required uint32 length = 3 [default = 0];
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->length(), target);
  }

  // required .Butters.Model.PacketHeader.FormatType format = 4 [default = BINARY];
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->format(), target);
  }

  // required .Butters.Model.PacketHeader.PacketStatus status = 5 [default = RETRIEVED];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // required .Butters.Model.PacketHeader.TransmitType transmit = 6 [default = DIRECT];
  if (has_transmit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->transmit(), target);
  }

  // required uint32 packetNum = 7;
  if (has_packetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->packetnum(), target);
  }

  // required uint32 totalPackets = 8;
  if (has_totalpackets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->totalpackets(), target);
  }

  // required uint32 bodyCrc = 9;
  if (has_bodycrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->bodycrc(), target);
  }

  // required uint32 headerCrc = 10;
  if (has_headercrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->headercrc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Butters.Model.PacketHeader)
  return target;
}

int PacketHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .Butters.Model.PacketHeader.CmdType cmd = 2 [default = CREATE];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // required uint32 length = 3 [default = 0];
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

    // required .Butters.Model.PacketHeader.FormatType format = 4 [default = BINARY];
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

    // required .Butters.Model.PacketHeader.PacketStatus status = 5 [default = RETRIEVED];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required .Butters.Model.PacketHeader.TransmitType transmit = 6 [default = DIRECT];
    if (has_transmit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transmit());
    }

    // required uint32 packetNum = 7;
    if (has_packetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packetnum());
    }

    // required uint32 totalPackets = 8;
    if (has_totalpackets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalpackets());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 bodyCrc = 9;
    if (has_bodycrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodycrc());
    }

    // required uint32 headerCrc = 10;
    if (has_headercrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headercrc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PacketHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PacketHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PacketHeader::MergeFrom(const PacketHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_transmit()) {
      set_transmit(from.transmit());
    }
    if (from.has_packetnum()) {
      set_packetnum(from.packetnum());
    }
    if (from.has_totalpackets()) {
      set_totalpackets(from.totalpackets());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bodycrc()) {
      set_bodycrc(from.bodycrc());
    }
    if (from.has_headercrc()) {
      set_headercrc(from.headercrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PacketHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketHeader::CopyFrom(const PacketHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void PacketHeader::Swap(PacketHeader* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cmd_, other->cmd_);
    std::swap(length_, other->length_);
    std::swap(format_, other->format_);
    std::swap(status_, other->status_);
    std::swap(transmit_, other->transmit_);
    std::swap(packetnum_, other->packetnum_);
    std::swap(totalpackets_, other->totalpackets_);
    std::swap(bodycrc_, other->bodycrc_);
    std::swap(headercrc_, other->headercrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PacketHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PacketHeader_descriptor_;
  metadata.reflection = PacketHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Model
}  // namespace Butters

// @@protoc_insertion_point(global_scope)
