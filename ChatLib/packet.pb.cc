// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_PacketBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_PacketBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_PacketHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_PacketHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_PacketHeader_CmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_PacketHeader_FormatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_PacketHeader_PacketStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_PacketHeader_TransmitType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_packet_2eproto() {
  protobuf_AddDesc_packet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packet.proto");
  GOOGLE_CHECK(file != NULL);
  Packet_descriptor_ = file->message_type(0);
  static const int Packet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, body_),
  };
  Packet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_descriptor_,
      Packet::default_instance_,
      Packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet));
  Packet_PacketBody_descriptor_ = Packet_descriptor_->nested_type(0);
  static const int Packet_PacketBody_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_PacketBody, buffer_),
  };
  Packet_PacketBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_PacketBody_descriptor_,
      Packet_PacketBody::default_instance_,
      Packet_PacketBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_PacketBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_PacketBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_PacketBody));
  Packet_PacketHeader_descriptor_ = Packet_descriptor_->nested_type(1);
  static const int Packet_PacketHeader_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_PacketHeader, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_PacketHeader, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_PacketHeader, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_PacketHeader, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_PacketHeader, transmit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_PacketHeader, packetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_PacketHeader, totalpackets_),
  };
  Packet_PacketHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_PacketHeader_descriptor_,
      Packet_PacketHeader::default_instance_,
      Packet_PacketHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_PacketHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_PacketHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_PacketHeader));
  Packet_PacketHeader_CmdType_descriptor_ = Packet_PacketHeader_descriptor_->enum_type(0);
  Packet_PacketHeader_FormatType_descriptor_ = Packet_PacketHeader_descriptor_->enum_type(1);
  Packet_PacketHeader_PacketStatus_descriptor_ = Packet_PacketHeader_descriptor_->enum_type(2);
  Packet_PacketHeader_TransmitType_descriptor_ = Packet_PacketHeader_descriptor_->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_descriptor_, &Packet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_PacketBody_descriptor_, &Packet_PacketBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_PacketHeader_descriptor_, &Packet_PacketHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packet_2eproto() {
  delete Packet::default_instance_;
  delete Packet_reflection_;
  delete Packet_PacketBody::default_instance_;
  delete Packet_PacketBody_reflection_;
  delete Packet_PacketHeader::default_instance_;
  delete Packet_PacketHeader_reflection_;
}

void protobuf_AddDesc_packet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014packet.proto\"\324\004\n\006Packet\022$\n\006header\030\001 \002("
    "\0132\024.Packet.PacketHeader\022 \n\004body\030\002 \001(\0132\022."
    "Packet.PacketBody\032\034\n\nPacketBody\022\016\n\006buffe"
    "r\030\001 \003(\r\032\343\003\n\014PacketHeader\022\r\n\002id\030\001 \002(\r:\0010\022"
    "1\n\003cmd\030\002 \002(\0162\034.Packet.PacketHeader.CmdTy"
    "pe:\006CREATE\0227\n\006format\030\003 \002(\0162\037.Packet.Pack"
    "etHeader.FormatType:\006BINARY\022<\n\006status\030\004 "
    "\002(\0162!.Packet.PacketHeader.PacketStatus:\t"
    "RETRIEVED\022;\n\010transmit\030\005 \002(\0162!.Packet.Pac"
    "ketHeader.TransmitType:\006DIRECT\022\021\n\tpacket"
    "Num\030\006 \002(\r\022\024\n\014totalPackets\030\007 \002(\r\"7\n\007CmdTy"
    "pe\022\n\n\006CREATE\020\001\022\010\n\004READ\020\002\022\n\n\006UPDATE\020\003\022\n\n\006"
    "DELETE\020\004\"#\n\nFormatType\022\n\n\006BINARY\020\001\022\t\n\005AS"
    "CII\020\002\"+\n\014PacketStatus\022\r\n\tRETRIEVED\020\001\022\014\n\010"
    "CONTINUE\020\002\")\n\014TransmitType\022\n\n\006DIRECT\020\000\022\r"
    "\n\tBROADCAST\020\001", 613);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packet.proto", &protobuf_RegisterTypes);
  Packet::default_instance_ = new Packet();
  Packet_PacketBody::default_instance_ = new Packet_PacketBody();
  Packet_PacketHeader::default_instance_ = new Packet_PacketHeader();
  Packet::default_instance_->InitAsDefaultInstance();
  Packet_PacketBody::default_instance_->InitAsDefaultInstance();
  Packet_PacketHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packet_2eproto {
  StaticDescriptorInitializer_packet_2eproto() {
    protobuf_AddDesc_packet_2eproto();
  }
} static_descriptor_initializer_packet_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Packet_PacketBody::kBufferFieldNumber;
#endif  // !_MSC_VER

Packet_PacketBody::Packet_PacketBody()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Packet.PacketBody)
}

void Packet_PacketBody::InitAsDefaultInstance() {
}

Packet_PacketBody::Packet_PacketBody(const Packet_PacketBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Packet.PacketBody)
}

void Packet_PacketBody::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_PacketBody::~Packet_PacketBody() {
  // @@protoc_insertion_point(destructor:Packet.PacketBody)
  SharedDtor();
}

void Packet_PacketBody::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_PacketBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_PacketBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_PacketBody_descriptor_;
}

const Packet_PacketBody& Packet_PacketBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

Packet_PacketBody* Packet_PacketBody::default_instance_ = NULL;

Packet_PacketBody* Packet_PacketBody::New() const {
  return new Packet_PacketBody;
}

void Packet_PacketBody::Clear() {
  buffer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_PacketBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Packet.PacketBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 buffer = 1;
      case 1: {
        if (tag == 8) {
         parse_buffer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_buffer())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buffer())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_buffer;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Packet.PacketBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Packet.PacketBody)
  return false;
#undef DO_
}

void Packet_PacketBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Packet.PacketBody)
  // repeated uint32 buffer = 1;
  for (int i = 0; i < this->buffer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->buffer(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Packet.PacketBody)
}

::google::protobuf::uint8* Packet_PacketBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Packet.PacketBody)
  // repeated uint32 buffer = 1;
  for (int i = 0; i < this->buffer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->buffer(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Packet.PacketBody)
  return target;
}

int Packet_PacketBody::ByteSize() const {
  int total_size = 0;

  // repeated uint32 buffer = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffer_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buffer(i));
    }
    total_size += 1 * this->buffer_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_PacketBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_PacketBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_PacketBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_PacketBody::MergeFrom(const Packet_PacketBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffer_.MergeFrom(from.buffer_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_PacketBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_PacketBody::CopyFrom(const Packet_PacketBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_PacketBody::IsInitialized() const {

  return true;
}

void Packet_PacketBody::Swap(Packet_PacketBody* other) {
  if (other != this) {
    buffer_.Swap(&other->buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_PacketBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_PacketBody_descriptor_;
  metadata.reflection = Packet_PacketBody_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_PacketHeader_CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_PacketHeader_CmdType_descriptor_;
}
bool Packet_PacketHeader_CmdType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_PacketHeader_CmdType Packet_PacketHeader::CREATE;
const Packet_PacketHeader_CmdType Packet_PacketHeader::READ;
const Packet_PacketHeader_CmdType Packet_PacketHeader::UPDATE;
const Packet_PacketHeader_CmdType Packet_PacketHeader::DELETE;
const Packet_PacketHeader_CmdType Packet_PacketHeader::CmdType_MIN;
const Packet_PacketHeader_CmdType Packet_PacketHeader::CmdType_MAX;
const int Packet_PacketHeader::CmdType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Packet_PacketHeader_FormatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_PacketHeader_FormatType_descriptor_;
}
bool Packet_PacketHeader_FormatType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_PacketHeader_FormatType Packet_PacketHeader::BINARY;
const Packet_PacketHeader_FormatType Packet_PacketHeader::ASCII;
const Packet_PacketHeader_FormatType Packet_PacketHeader::FormatType_MIN;
const Packet_PacketHeader_FormatType Packet_PacketHeader::FormatType_MAX;
const int Packet_PacketHeader::FormatType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Packet_PacketHeader_PacketStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_PacketHeader_PacketStatus_descriptor_;
}
bool Packet_PacketHeader_PacketStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_PacketHeader_PacketStatus Packet_PacketHeader::RETRIEVED;
const Packet_PacketHeader_PacketStatus Packet_PacketHeader::CONTINUE;
const Packet_PacketHeader_PacketStatus Packet_PacketHeader::PacketStatus_MIN;
const Packet_PacketHeader_PacketStatus Packet_PacketHeader::PacketStatus_MAX;
const int Packet_PacketHeader::PacketStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Packet_PacketHeader_TransmitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_PacketHeader_TransmitType_descriptor_;
}
bool Packet_PacketHeader_TransmitType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_PacketHeader_TransmitType Packet_PacketHeader::DIRECT;
const Packet_PacketHeader_TransmitType Packet_PacketHeader::BROADCAST;
const Packet_PacketHeader_TransmitType Packet_PacketHeader::TransmitType_MIN;
const Packet_PacketHeader_TransmitType Packet_PacketHeader::TransmitType_MAX;
const int Packet_PacketHeader::TransmitType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_PacketHeader::kIdFieldNumber;
const int Packet_PacketHeader::kCmdFieldNumber;
const int Packet_PacketHeader::kFormatFieldNumber;
const int Packet_PacketHeader::kStatusFieldNumber;
const int Packet_PacketHeader::kTransmitFieldNumber;
const int Packet_PacketHeader::kPacketNumFieldNumber;
const int Packet_PacketHeader::kTotalPacketsFieldNumber;
#endif  // !_MSC_VER

Packet_PacketHeader::Packet_PacketHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Packet.PacketHeader)
}

void Packet_PacketHeader::InitAsDefaultInstance() {
}

Packet_PacketHeader::Packet_PacketHeader(const Packet_PacketHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Packet.PacketHeader)
}

void Packet_PacketHeader::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cmd_ = 1;
  format_ = 1;
  status_ = 1;
  transmit_ = 0;
  packetnum_ = 0u;
  totalpackets_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_PacketHeader::~Packet_PacketHeader() {
  // @@protoc_insertion_point(destructor:Packet.PacketHeader)
  SharedDtor();
}

void Packet_PacketHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_PacketHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_PacketHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_PacketHeader_descriptor_;
}

const Packet_PacketHeader& Packet_PacketHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

Packet_PacketHeader* Packet_PacketHeader::default_instance_ = NULL;

Packet_PacketHeader* Packet_PacketHeader::New() const {
  return new Packet_PacketHeader;
}

void Packet_PacketHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Packet_PacketHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(transmit_, totalpackets_);
    id_ = 0u;
    cmd_ = 1;
    format_ = 1;
    status_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_PacketHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Packet.PacketHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required .Packet.PacketHeader.CmdType cmd = 2 [default = CREATE];
      case 2: {
        if (tag == 16) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet_PacketHeader_CmdType_IsValid(value)) {
            set_cmd(static_cast< ::Packet_PacketHeader_CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_format;
        break;
      }

      // required .Packet.PacketHeader.FormatType format = 3 [default = BINARY];
      case 3: {
        if (tag == 24) {
         parse_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet_PacketHeader_FormatType_IsValid(value)) {
            set_format(static_cast< ::Packet_PacketHeader_FormatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required .Packet.PacketHeader.PacketStatus status = 4 [default = RETRIEVED];
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet_PacketHeader_PacketStatus_IsValid(value)) {
            set_status(static_cast< ::Packet_PacketHeader_PacketStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_transmit;
        break;
      }

      // required .Packet.PacketHeader.TransmitType transmit = 5 [default = DIRECT];
      case 5: {
        if (tag == 40) {
         parse_transmit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet_PacketHeader_TransmitType_IsValid(value)) {
            set_transmit(static_cast< ::Packet_PacketHeader_TransmitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_packetNum;
        break;
      }

      // required uint32 packetNum = 6;
      case 6: {
        if (tag == 48) {
         parse_packetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packetnum_)));
          set_has_packetnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_totalPackets;
        break;
      }

      // required uint32 totalPackets = 7;
      case 7: {
        if (tag == 56) {
         parse_totalPackets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalpackets_)));
          set_has_totalpackets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Packet.PacketHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Packet.PacketHeader)
  return false;
#undef DO_
}

void Packet_PacketHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Packet.PacketHeader)
  // required uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .Packet.PacketHeader.CmdType cmd = 2 [default = CREATE];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  // required .Packet.PacketHeader.FormatType format = 3 [default = BINARY];
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->format(), output);
  }

  // required .Packet.PacketHeader.PacketStatus status = 4 [default = RETRIEVED];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // required .Packet.PacketHeader.TransmitType transmit = 5 [default = DIRECT];
  if (has_transmit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->transmit(), output);
  }

  // required uint32 packetNum = 6;
  if (has_packetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->packetnum(), output);
  }

  // required uint32 totalPackets = 7;
  if (has_totalpackets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->totalpackets(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Packet.PacketHeader)
}

::google::protobuf::uint8* Packet_PacketHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Packet.PacketHeader)
  // required uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .Packet.PacketHeader.CmdType cmd = 2 [default = CREATE];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  // required .Packet.PacketHeader.FormatType format = 3 [default = BINARY];
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->format(), target);
  }

  // required .Packet.PacketHeader.PacketStatus status = 4 [default = RETRIEVED];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // required .Packet.PacketHeader.TransmitType transmit = 5 [default = DIRECT];
  if (has_transmit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->transmit(), target);
  }

  // required uint32 packetNum = 6;
  if (has_packetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->packetnum(), target);
  }

  // required uint32 totalPackets = 7;
  if (has_totalpackets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->totalpackets(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Packet.PacketHeader)
  return target;
}

int Packet_PacketHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .Packet.PacketHeader.CmdType cmd = 2 [default = CREATE];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // required .Packet.PacketHeader.FormatType format = 3 [default = BINARY];
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

    // required .Packet.PacketHeader.PacketStatus status = 4 [default = RETRIEVED];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required .Packet.PacketHeader.TransmitType transmit = 5 [default = DIRECT];
    if (has_transmit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transmit());
    }

    // required uint32 packetNum = 6;
    if (has_packetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packetnum());
    }

    // required uint32 totalPackets = 7;
    if (has_totalpackets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalpackets());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_PacketHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_PacketHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_PacketHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_PacketHeader::MergeFrom(const Packet_PacketHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_transmit()) {
      set_transmit(from.transmit());
    }
    if (from.has_packetnum()) {
      set_packetnum(from.packetnum());
    }
    if (from.has_totalpackets()) {
      set_totalpackets(from.totalpackets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_PacketHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_PacketHeader::CopyFrom(const Packet_PacketHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_PacketHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Packet_PacketHeader::Swap(Packet_PacketHeader* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cmd_, other->cmd_);
    std::swap(format_, other->format_);
    std::swap(status_, other->status_);
    std::swap(transmit_, other->transmit_);
    std::swap(packetnum_, other->packetnum_);
    std::swap(totalpackets_, other->totalpackets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_PacketHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_PacketHeader_descriptor_;
  metadata.reflection = Packet_PacketHeader_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet::kHeaderFieldNumber;
const int Packet::kBodyFieldNumber;
#endif  // !_MSC_VER

Packet::Packet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Packet)
}

void Packet::InitAsDefaultInstance() {
  header_ = const_cast< ::Packet_PacketHeader*>(&::Packet_PacketHeader::default_instance());
  body_ = const_cast< ::Packet_PacketBody*>(&::Packet_PacketBody::default_instance());
}

Packet::Packet(const Packet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Packet)
}

void Packet::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete body_;
  }
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_descriptor_;
}

const Packet& Packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

Packet* Packet::default_instance_ = NULL;

Packet* Packet::New() const {
  return new Packet;
}

void Packet::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_header()) {
      if (header_ != NULL) header_->::Packet_PacketHeader::Clear();
    }
    if (has_body()) {
      if (body_ != NULL) body_->::Packet_PacketBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.PacketHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional .Packet.PacketBody body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Packet)
  // required .Packet.PacketHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .Packet.PacketBody body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Packet)
}

::google::protobuf::uint8* Packet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Packet)
  // required .Packet.PacketHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .Packet.PacketBody body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Packet)
  return target;
}

int Packet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.PacketHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .Packet.PacketBody body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::Packet_PacketHeader::MergeFrom(from.header());
    }
    if (from.has_body()) {
      mutable_body()->::Packet_PacketBody::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void Packet::Swap(Packet* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_descriptor_;
  metadata.reflection = Packet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
